require 'yaml'
require 'open-uri'
require 'pathname'
require 'rays/core'

task :default => [:create]

task :create do
  server = RaysServerUtil.new
  server.create_server
  server.init_database
end

task :refresh do
  server = RaysServerUtil.new
  server.init_database
  server.recreate_server
end

task :update do
  server = RaysServerUtil.new
  server.configure_liferay
end

class RaysServerUtil
  def initialize
    @liferay_archive = 'liferay-portal-tomcat-6.1.0-ce-ga1-20120106155615760.zip'
    @liferay_archive_path = File.join(ENV['HOME'], 'Downloads', @liferay_archive)
    @extracted_name = 'liferay-portal-6.1.0-ce-ga1'
    @url = 'http://downloads.sourceforge.net/project/lportal/Liferay%20Portal/6.1.0%20GA1/liferay-portal-tomcat-6.1.0-ce-ga1-20120106155615760.zip?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Flportal%2Ffiles%2FLiferay%2520Portal%2F6.1.0%2520GA1%2F&ts=1332039099&use_mirror=superb-sea2'
    init_liferay_archive
  end

  def refresh
    init_database
    recreate_server
  end

  def init_database
    log_block("(re)create database") do
      db_type = environment.database.type
      rays_exec('psql -U postgres < support-files/init.sql')  if 'postgres'.eql? db_type
      rays_exec('mysql -uroot -p < support-files/init.sql')  if 'mysql'.eql? db_type
    end
  end

  def recreate_server
    remove_server_directory
    create_server
  end

  def create_server
    if Dir.exist? server_root
      $log.error 'server has already been created'
      exit 1
    else
      copy_liferay_archive_to_server_base
      extract_liferay_archive
      configure_liferay
      cleanup_portlets
    end
  end


  def configure_liferay
    $log.info 'copy server configuration files'
    FileUtils.cp(File.join(Dir.pwd, 'support-files/portal-ext.properties'), liferay_root)
    FileUtils.cp(File.join(Dir.pwd, 'support-files/ROOT.xml'), File.join(server_root, 'conf/Catalina/localhost/ROOT.xml'))
  end

  private
  def in_directory(directory)
    if Dir.exist? directory
      original_directory = Dir.pwd
      Dir.chdir directory
      begin
        yield
      ensure
        Dir.chdir original_directory
      end
    end
  end

  def remove_server_directory
    $log.info "remove server directory"
    FileUtils.rm_rf liferay_root
  end

  def server_root
    environment.liferay.service.path
  end

  def liferay_root
    File.dirname server_root
  end

  def liferay_base
    File.dirname liferay_root
  end

  def copy_liferay_archive_to_server_base
    $log.info 'copy liferay archive to destination directory'
    FileUtils.cp @liferay_archive_path, liferay_base
  end

  def extract_liferay_archive
    in_directory liferay_base do
      $log.info 'extracting liferay'
      rays_exec "unzip #{@liferay_archive}"

      $log.info 'removing archive'
      FileUtils.rm_f(@liferay_archive)
      FileUtils.mv(@extracted_name, File.basename(liferay_root))
    end
  end

  def cleanup_portlets
    in_directory File.join(server_root, 'webapps') do
      task 'cleaning portlets', 'done', 'failed' do
        portlets_to_remove = %w(chat-portlet knowledge-base-portlet mail-portlet opensocial-portlet sevencogs-hook sevencogs-theme wsrp-portlet)

        portlets_to_remove.each do |portlet|
          portlet_path = File.join(Dir.pwd, portlet)
          if Dir.exist? portlet_path
            $log.info "removing #{portlet}"
            FileUtils.rm_rf portlet_path
          end
        end
      end
    end
  end

  def init_liferay_archive
    unless File.exist? @liferay_archive_path
      $log.info 'Downloading liferay ...'
      write_out = open(@liferay_archive_path, "wb")
      write_out.write(open(@url).read)
      write_out.close
    end

    unless File.exist? @liferay_archive_path
      $log.error "cannot neither find #{@liferay_archive_path} nor download liferay zip from #{@url}."
      exit 1
    end
  end

  def environment
    $rays_config.environments['local']
  end
end
